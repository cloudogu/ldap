#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

OPENLDAP_RUN_DIR="/var/run/openldap"
export OPENLDAP_RUN_PIDFILE="${OPENLDAP_RUN_DIR}/slapd.pid"
slapd_exe=$(command -v slapd)
MIGRATION_TMP_DIR="migration2.6.0"

if [[ ! -d ${MIGRATION_TMP_DIR} ]]; then
  mkdir -p ${MIGRATION_TMP_DIR}
fi

function run_preupgrade() {
  FROM_VERSION="${1}"
  TO_VERSION="${2}"

  echo "Executing Redmine pre-upgrade from ${FROM_VERSION} to ${TO_VERSION}"

  if [ "${FROM_VERSION}" = "${TO_VERSION}" ]; then
    echo "FROM and TO versions are the same; Exiting..."
    exit 0
  fi

  echo "Set registry flag so startup script waits for post-upgrade to finish..."
  doguctl state "upgrading"

  if versionXLessOrEqualThanY "${FROM_VERSION}" "2.6.0-1" ; then
    # this migration only needs to be done if the additional plugins volume was already created
    if ! versionXLessOrEqualThanY "${FROM_VERSION}" "2.6.0-1" ; then
      startConvertDB
    fi
  fi

  doguctl config "startup/setup_done" "true"

  echo "Redmine pre-upgrade done"
}

# versionXLessOrEqualThanY returns true if X is less than or equal to Y; otherwise false
function versionXLessOrEqualThanY() {
  local sourceVersion="${1}"
  local targetVersion="${2}"

  if [[ "${sourceVersion}" == "${targetVersion}" ]]; then
    return 0
  fi

  declare -r semVerRegex='([0-9]+)\.([0-9]+)\.([0-9]+)-([0-9]+)'

   sourceMajor=0
   sourceMinor=0
   sourceBugfix=0
   sourceDogu=0
   targetMajor=0
   targetMinor=0
   targetBugfix=0
   targetDogu=0

  if [[ ${sourceVersion} =~ ${semVerRegex} ]]; then
    sourceMajor=${BASH_REMATCH[1]}
    sourceMinor="${BASH_REMATCH[2]}"
    sourceBugfix="${BASH_REMATCH[3]}"
    sourceDogu="${BASH_REMATCH[4]}"
  else
    echo "ERROR: source dogu version ${sourceVersion} does not seem to be a semantic version"
    exit 1
  fi

  if [[ ${targetVersion} =~ ${semVerRegex} ]]; then
    targetMajor=${BASH_REMATCH[1]}
    targetMinor="${BASH_REMATCH[2]}"
    targetBugfix="${BASH_REMATCH[3]}"
    targetDogu="${BASH_REMATCH[4]}"
  else
    echo "ERROR: target dogu version ${targetVersion} does not seem to be a semantic version"
    exit 1
  fi

  if [[ $((sourceMajor)) -lt $((targetMajor)) ]] ; then
    return 0;
  fi
  if [[ $((sourceMajor)) -le $((targetMajor)) && $((sourceMinor)) -lt $((targetMinor)) ]] ; then
    return 0;
  fi
  if [[ $((sourceMajor)) -le $((targetMajor)) && $((sourceMinor)) -le $((targetMinor)) && $((sourceBugfix)) -lt $((targetBugfix)) ]] ; then
    return 0;
  fi
  if [[ $((sourceMajor)) -le $((targetMajor)) && $((sourceMinor)) -le $((targetMinor)) && $((sourceBugfix)) -le $((targetBugfix)) && $((sourceDogu)) -lt $((targetDogu)) ]] ; then
    return 0;
  fi

  return 1
}

function startConvertDB () {
  # Creating dump
  echo "exporting DB ..."
  slapcat -n 0 -l ${MIGRATION_TMP_DIR}/config.ldif
  slapcat -n 1 -l ${MIGRATION_TMP_DIR}/data.ldif

  echo "# Changing Config"
  sed -i '/back_bdb.so/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/back_hdb.so/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i 's/hdb/mdb/g' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i 's/Hdb/Mdb/g' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/olcDbCheckpoint/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/set_cachesize/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/set_lk_max_locks/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/set_lk_max_objects/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/set_lk_max_lockers/d' ${MIGRATION_TMP_DIR}/config.ldif
  sed -i '/dn: cn={4}ppolicy/,/^$/d' ${MIGRATION_TMP_DIR}/config.ldif

  # stop slapd
#  if [[ ! -s ${OPENLDAP_RUN_PIDFILE} ]]; then
#    echo >&2 "$0 ($slapd_exe): ${OPENLDAP_RUN_PIDFILE} is missing, did the daemon start?"
#    exit 1
#  else
#    slapd_pid=$(cat ${OPENLDAP_RUN_PIDFILE})
#    echo >&2 "$0 ($slapd_exe): sending SIGINT to initdb daemon with pid=$slapd_pid"
#    kill -s INT "$slapd_pid" || true
#    while : ; do
#      [[ ! -f ${OPENLDAP_RUN_PIDFILE} ]] && break
#      sleep 1
#      echo >&2 "$0 ($slapd_exe): initdb daemon is still up, sleeping ..."
#    done
#    echo >&2 "$0 ($slapd_exe): initdb daemon stopped"
#  fi

  echo "cleanup config and db folders..."
  rm -rf /etc/openldap/slapd.d/*
  rm -rf /var/lib/openldap/*

  echo "setting rights correctly..."
  chmod -R 700 /etc/openldap/slapd.d
  chmod -R 700 /var/lib/openldap
  chown -R ldap:ldap /etc/openldap/slapd.d
  chown -R ldap:ldap /var/lib/openldap

  echo "importing  dump"
  slapadd -n 0 -F /etc/openldap/slapd.d -l ${MIGRATION_TMP_DIR}/config.ldif
  slapadd -n 1 -F /etc/openldap/slapd.d -l ${MIGRATION_TMP_DIR}/data.ldif

  chmod -R 700 /etc/openldap/slapd.d
  chmod -R 700 /var/lib/openldap
  chown -R ldap:ldap /etc/openldap/slapd.d
  chown -R ldap:ldap /var/lib/openldap
}

# versionXLessThanY returns true if X is less than Y; otherwise false
function versionXLessThanY() {
  if [[ "${1}" == "${2}" ]]; then
    return 1
  fi

  versionXLessOrEqualThanY "${1}" "${2}"
}


# make the script only run when executed, not when sourced from bats tests
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  run_preupgrade "$@"
fi

startConvertDB 


